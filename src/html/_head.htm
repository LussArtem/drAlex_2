<head>
	<title>@@title</title>
	<meta charset="UTF-8">
	<meta name="format-detection" content="telephone=no">
	<!-- <style>body{opacity: 0;}</style> -->
	<link rel="stylesheet" href="css/style.min.css">
	<link rel="shortcut icon" href="favicon.ico">
	<!-- <meta name="robots" content="noindex, nofollow"> -->
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="description"
		content="Ночной клуб в вашем городе. Лучшие DJ, танцевальная музыка и атмосфера. Приходите и проведите незабываемую ночь!">
	<meta name="keywords" content="ночной клуб, клуб, музыка, танцы, вечеринка, диджей, развлечения, ночная жизнь">
	<meta name="author" content="vosmerok">

	<!-- Дополнительные мета-теги, которые можно использовать -->
	<meta name="robots" content="index, follow">
	<!-- Указывает поисковым роботам индексировать и следовать по ссылкам на сайте -->
	<meta name="revisit-after" content="7 days">
	<!-- Указывает поисковым роботам через какой промежуток времени возвращаться к индексации сайта -->




	<!-- Стили для прелоадера -->

	<style data-lp class="preloader-style">
		.preloader {
			pointer-events: none;
			z-index: 1000;
			position: fixed;
			width: 100vw;
			height: 100vh;
			top: 0;
			left: 0;
			display: flex;
			justify-content: center;
			align-items: center;
			background-color: #e0dddd1e;
			/* background: linear-gradient(45deg, rgb(21, 19, 21) 10%, rgb(90, 43, 96) 100%); */
		}

		.preloader * {
			box-sizing: border-box;
		}

		.preloader__body {
			/* padding: 0.93rem;
			display: flex;
			flex-direction: column;
			position: relative;
			width: 280px;
			height: 280px; */
		}

		.preloader__one,
		.preloader__two {
			position: absolute;
			width: 50%;
			height: 100%;
			top: 0;
			background-color: #161616;
			transition: transform 0.55s;
			background-image: url(@img/2.gif);
			background-blend-mode: multiply;
		}

		.preloader__one {
			left: 0;

		}

		.preloader__two {
			left: 50%;

		}

		.loaded .preloader__two {
			transform: translateX(100%);
			border-left: 1px solid #ffffff;

		}

		.loaded .preloader__one {
			transform: translateX(-100%);
			border-right: 1px solid #ffffff;
		}



		.preloader__counter {
			position: absolute;
			color: #ffffff;
			padding-top: 100%;
			left: 50%;
			bottom: 0;
			font-family: sans-serif;
			transition: bottom 1s;

			font-weight: 900;
			font-size: 35px;
		}

		.preloader__line span {
			position: absolute;
			bottom: 0;
			left: 50%;
			transform: translateX(-50%);
			width: 1px;
			height: 0%;
			background-color: white;
			z-index: 500000;
			opacity: 1;


			transition: height 1s;
		}

		.loaded .preloader__line span {
			opacity: 0;
		}

		.loaded .preloader__counter {
			opacity: 0;
		}

		/* .preload-animation .preloader__line span {
			opacity: 1;
		} */

		.lock body {
			overflow: hidden;
			touch-action: none;
			overscroll-behavior: none;
		}

		.lock .wrapper {
			opacity: 0;
			visibility: hidden;
		}

		/* .loading .preloader {
			opacity: 1;
			visibility: visible;
		} */

		/* .download-done .preloader {
			opacity: 0;
			visibility: hidden;
			 transition: all 0.5s ease 0s; 
		} */

		.wrapper {
			transition: opacity 0.3s ease 0s;
			opacity: 1;
			visibility: visible;
		}
	</style>



	<!-- Скрипт прелоадера -->
	<script id="preloader">
		(function () {
			const preloaderContainer = document.querySelector('#preloader');
			let preloader, preloaderBody, showPecentLoad, showLineLoad;
			const htmlDocument = document.documentElement;
			const settings = {
				// Задержка перед удалением прелоадера из html после окончания загрузки
				delayRemovePreloader: 1500,
				// Функционал процентного отображения
				counter: true,
				// Функционал процентного отображения загрузки
				line: true,
				// Функционал кастомного отображения разных элементов (можно редактировать) – для включения перевести init в позицию true.
				custom: {
					init: true,
					// Элементы, которые нужно добавлять в preloader__body
					body: `<div class="preloader__one "></div>
							<div class="preloader__two "></div>`
				},
			};
			const checkBodyinterval = setInterval(() => {
				if (document.body) {
					clearInterval(checkBodyinterval);
					const preloaderTemplate = `
								<div class="preloader">
									<div class="preloader__body">
										${settings.custom.init ? settings.custom.body : ''}
										${settings.counter ? '<div class="preloader__counter">0%</div>' : ''}
										${settings.line ? '<div class="preloader__line"><span></span></div>' : ''}
									</div>
								</div>
							`;
					htmlDocument.insertAdjacentHTML("beforeend", preloaderTemplate);
					preloader = document.querySelector('.preloader');
					preloaderBody = preloader.querySelector('.preloader__body');
					showPecentLoad = document.querySelector('.preloader__counter');
					showLineLoad = document.querySelector('.preloader__line span');
				}
			}, 10);
			const checkScriptsInterval = setInterval(() => {
				const mainScriptsTag = document.querySelector('[data-main-script]');
				if (mainScriptsTag) {
					clearInterval(checkScriptsInterval);
					let preloaderImages = document.querySelectorAll('img, video');
					const preloaderStyle = document.querySelector('.preloader-style');
					if (preloaderImages.length) {
						const intervalDelayCuonter = 4 * preloaderImages.length < 40 ? 4 * preloaderImages.length : 40;
						let imagesLoadedCount = counter = progress = 0;
						htmlDocument.classList.add('loading');
						htmlDocument.classList.add('lock');
						window.addEventListener("load", () => htmlDocument.classList.add('download-done'));
						preloaderImages.forEach(preloaderImage => {
							const imgClone = document.createElement('img');
							if (imgClone) {
								imgClone.onload = imageLoaded;
								imgClone.onerror = imageLoaded;
								preloaderImage.dataset.src ? imgClone.src = preloaderImage.dataset.src : imgClone.src = preloaderImage.src;
							}
						});


						function setValueProgress(progress) {
							showPecentLoad ? showPecentLoad.innerText = `${progress}%` : null;
							showPecentLoad ? showPecentLoad.style.bottom = `${progress}%` : null;
							showLineLoad ? showLineLoad.style.height = `${progress}%` : null;
						}
						showPecentLoad ? setValueProgress(progress) : null;


						function imageLoaded() {
							imagesLoadedCount++;
							progress = Math.round((100 / preloaderImages.length) * imagesLoadedCount);
							const intervalId = setInterval(() => {
								counter >= progress ? clearInterval(intervalId) : setValueProgress(++counter);
								counter >= 100 ? addLoadedClass() : null;
							}, intervalDelayCuonter);
						}

						function addLoadedClass() {
							if (this.isRun == true) return;
							this.isRun = true;

							let timer = setInterval(() => {
								if (htmlDocument.closest('.download-done')) {
									htmlDocument.classList.remove('lock');
									htmlDocument.classList.remove('loading');
									htmlDocument.classList.add('preload-animation');
									setTimeout(() => {
										htmlDocument.classList.remove('download-done');
										htmlDocument.classList.add('loaded');
									}, settings.delayRemovePreloader >= 500 ? settings.delayRemovePreloader - 500 : 0);
									const intervalRemovePreloader = setInterval(() => {
										htmlDocument.classList.remove('preload-animation');
										preloader.remove();
										if (preloaderStyle) {
											preloaderStyle.remove();
										}
										clearInterval(intervalRemovePreloader);
										clearInterval(timer);
										preloaderContainer.remove();
										mainScriptsTag.removeAttribute('data-main-script');
									}, settings.delayRemovePreloader);
								} else {
									return;
								}
							}, 300);
						}
					} else {
						if (preloaderStyle) {
							preloaderStyle.remove();
						}
						preloaderContainer.remove();
					}
				}
			}, 10);
		})();

	</script>
</head>